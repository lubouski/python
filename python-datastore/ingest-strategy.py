# Imports the Google Cloud client library
from google.cloud import datastore
import argparse

# Create variables
parser = argparse.ArgumentParser()
parser.add_argument('--namespace', help='Your cloud project namespace.')
parser.add_argument('--dagname', help='Your DagName field.', default=None, type=str)
parser.add_argument('--datatype', help='Your DataType field.', default=None, type=str)
parser.add_argument('--userid', help='Your UserID field.', default=None, type=str)
parser.add_argument('--workflowtype', help='Your WorkflowType field.', default=None, type=str)

args = parser.parse_args()

# Instantiates a client
namespace = args.namespace
datastore_client = datastore.Client(namespace=namespace)

# The kind for the new entity
kind = 'ingest-strategy'
# The name/ID for the new entity could be added as datastore_client.key(kind, name)
# In our case datastore creates autogenerated id
# The Cloud Datastore key for the new entity
task_key = datastore_client.key(kind)

# Prepares the new entity
# If we create field - task['DAGName'] = Default_dag ;
# This will be presented in datastore as DAGName - dURlZmF1bHRfZGFn , basically as blob variable;
# Correct syntax should be task['DAGName'] = u'Default_dag' , which means convert to unicode string. 

# if statement on whether we need to change variable to unicode-string or keep it None type 

if args.dagname is None:
    DAGName = args.dagname
else:
    DAGName = unicode(args.dagname, "utf-8")
if args.datatype is None:
    DataType = args.datatype
else:
    DataType = unicode(args.datatype, "utf-8")
if args.userid is None:
    UserID = args.userid
else:
    UserID = unicode(args.userid, "utf-8")
if args.workflowtype is None:
    WorkflowType = args.workflowtype
else:
    WorkflowType = unicode(args.workflowtype, "utf-8")

# Initialize entity, and create fields
task = datastore.Entity(key=task_key)
task['DAGName'] = DAGName
task['DataType'] = DataType
task['UserID']= UserID
task['WorkflowType'] = WorkflowType

# Saves the entity to datastore
datastore_client.put(task)

